#!/usr/bin/ruby
require 'colorize'
load '/etc/timepatrol/config'

def now
 Time.new.strftime "%Y.%m.%d;%H:%M:%S"
end


def if_letter_then_abort(selid)
  if [*'a'..'z',*'A'..'Z'].include? selid
    puts format_message("ABORTED.",1)
    abort
  end
end


def snapid
  ids = `btrfs subvolume list / | grep #{SNAPSHOTS_VOLUME}/`
  id_list=[]
  ids.split("\n").each do |i|
    id_list<<i.split('/')[1].to_i
  end
  return id_list.sort
end


def snapshot(comm,keep,fake)
  id = snapid.last.to_i + 1
  path = SNAPSHOTS_FOLDER + '/' + id.to_s
  kernel = `uname -r`.chomp
  `mkdir #{path}`
  if comm.nil? then comm = '' end
  unless fake 
    puts `btrfs subvolume snapshot / #{path}/data` 
    File.write('/tmp/timepatrol_last_snapshot',path,mode:'w')
  end
  comm = comm.gsub(';','')
  info = "#{now};#{comm};#{kernel};#{keep}"
  File.write("#{path}/info",info,mode:'w')
end



def splitstr(string,shift)
  max = 35
  line = ''
  total = 0
  string.gsub!('/','/ ')
  string.split(' ').each do |s|
    scut = s[0..max]
    total = total + scut.size
    if total < max
      line = line + scut + ' '
    else
      total = scut.size
      line = line + "\n" + ' '*shift + scut + ' ' 
    end
  end
  line.gsub!('/ ','/')
  return line
end



def readinfo(id)
  path = SNAPSHOTS_FOLDER + '/' + id.to_s
  unless Dir.exist? path then puts format_message("There is\
 no snapshot ID [#{id}].",1); abort end
  info = File.read(path + '/info').strip.split(';')
  date  = info[0]
  time  = info[1]
  desc  = info[2]
  kernel= info[3]
  keep  = info[4]
  comm  = splitstr(desc,45)
  return [date,time,comm,kernel,keep]
end



def colorline(string,index)
  if index.odd? then string = string.white end
  if index.even? then string = string.light_white end
  return string
end



def list(opt)
    title = ":: TIMEPATROL SNAPSHOTS ::"
    legend= ' '*3+"ID"\
      +' '*3+"DATE"\
      +' '*8+"TIME"\
      +' '*6+"KERNEL"\
      +' '*9+"COMMENT"
    
    tlhalf = title.length/2
    nline = 84
    
    line = ("-".light_white)*nline
    lineline = ("=".light_white)*nline
    
    puts lineline
    puts " "*(nline/2-tlhalf)+title.yellow.bold
    puts lineline
    puts legend.bold
    
    snapid.each.with_index do |id,index|
    
      date   = readinfo(id)[0]
      time   = readinfo(id)[1]
      comm   = readinfo(id)[2]
      kernel = readinfo(id)[3]
      keep   = readinfo(id)[4]
      #=======
      unless opt == 'list-verbose' then comm = comm[0..150].strip end
      #=======
      
      space = 4 - id.to_s.size
      kspace = 15 - kernel.size
      
      kk = ''
      if keep == '1' then kk='*'.green.bold;space-=1 end
      
      id_string = colorline("[#{id}]",index)
      date = colorline(date,index)
      time = colorline(time,index)
      comm = colorline(comm,index)
      kernel = colorline(kernel,index)
      
      puts ' '*space\
        +kk+\
        +id_string+\
        +' '*2+date\
        +' '*2+time\
        +' '*2+kernel\
        +' '*kspace+comm
    end
    puts line
    puts "TOTAL: #{snapid.length}".bold
    
    unless opt=='list' or 'list-verbose' 
      if opt == 'rollback' then opt += ' to' end
      opt = opt.magenta
      puts format_message("Select a snapshot to #{opt}\
 or type any letter to ABORT:",0)
    end

end


def rollback
  countdown = 10 # seconds before rebooting
  rollid = @array_selected.first 
  kernel_from = `uname -r`.chomp 
  kernel_to = readinfo(rollid)[3]

  if @array_selected.length != 1 then puts format_message("You\
 must choose a single ID. ABORTED.",1);abort end

  if kernel_from != kernel_to
    puts format_message("Running kernel (#{kernel_from}) is\
 different from snapshot [#{rollid}] kernel. ABORTED.",1)
    abort
  end
  
  puts format_message("Rolling back to the following snapshot:",0)
  puts showinfo(rollid).cyan
  puts format_message("Confirm? [y/N]",2)
  
  if STDIN.gets.chomp == 'y' 
    `mkdir #{MOUNT_POINT} && mount -o subvolid=5 #{DEVICE} #{MOUNT_POINT}`
    
    check_root = Dir.exists? MOUNT_POINT+'/'+ROOT_VOLUME
    check_snap = Dir.exists? MOUNT_POINT+'/'+SNAPSHOTS_VOLUME
    unless check_root and check_snap
      puts format_message("Mounting stage went wrong. ABORTED.",1)
      abort
    end
   

    id = snapid.last + 1
    date = readinfo(rollid)[0]
    time = readinfo(rollid)[1]

    snapshot("PRE: rollback to [#{date} #{time}]",0,true) 
    
    `mv #{MOUNT_POINT}/#{ROOT_VOLUME} #{MOUNT_POINT}/#{SNAPSHOTS_VOLUME}/#{id}/data`
    `btrfs subvolume snapshot #{MOUNT_POINT}/#{SNAPSHOTS_VOLUME}/#{rollid}/data #{MOUNT_POINT}/#{ROOT_VOLUME}`
    list_subvol = `btrfs subvolume list /`.split("\n")
    list_subvol.each do |subvol|
      data = subvol.split(' ')
      if data[8] == ROOT_VOLUME 
        `btrfs subvolume set-default #{data[1]} /`
        break
      end
    end

   
    `umount #{MOUNT_POINT} && rm -r #{MOUNT_POINT}`

    puts format_message("Confirmed. Rebooting in...",0)
      (countdown-1).times do |i| 
        puts countdown-=1
        sleep 1
      end
      puts 'BUCKLE UP!'
      sleep 1
    `reboot`
  
  else
    puts format_message('ABORTED.',1)
  end
end



def showinfo(id)
  date = readinfo(id)[0]
  time = readinfo(id)[1]
  comm = readinfo(id)[2]
  kernel = readinfo(id)[3]
  space = " "*(3 - id.to_s.length)
  return "#{space} [#{id}] #{date} #{time} #{kernel} #{comm}" 
end


def select(selid)
  array_selected = []
  keyword = ['date=','time=','comment=','kernel=','keep=']
  
  keyword.map {|k| if selid.include? k then @special=true; break end}
  if @special
    5.times do |j|
      snapid.each do |id|
        string = readinfo(id)[j]
        if string.include? selid.sub(keyword[j],'')
          array_selected<<id
        end
      end
    end
  else
    selid.split(',').each do |item|
      if item.include? '-' 
        selid_i = item.split('-').first.to_i
        selid_f = item.split('-').last.to_i
        if selid_i >= selid_f 
          puts format_message("Bad range. ABORTED.",1)
          abort 
        end
        snapid.each do |id|
          if id >= selid_i and id <= selid_f
            array_selected<<id
          end
        end
      else
        snapid.include? item
        array_selected<<item
      end
    end 
  end
  
  if array_selected.empty?
    puts format_message("No snapshot meets the given criteria. ABORTED.",1)
    abort
  end

  return @array_selected = array_selected
end



def delete
  @array_selected.each do |id|
      puts showinfo(id).cyan
  end

  puts format_message("Confirm deletion of the selected snapshot(s) above? [y/N]",2)
  ans = STDIN.gets.chomp
  
  if ans == 'y' 
    puts format_message("Confirmed.",0)
    @array_selected.each do |id|
      code1 = `btrfs subvolume delete #{SNAPSHOTS_FOLDER}/#{id}/data; echo $?`.to_i
      code2 = `rm -r #{SNAPSHOTS_FOLDER}/#{id}; echo $?`.to_i 
      if code1.abs+code2.abs > 0 then puts "FAILED deleting snapshot [#{id}]." end
    end
  else #if choosed N
    puts format_message('ABORTED.',1)
  end

end


def repack
  puts "Repacking snapshots..."
  path = SNAPSHOTS_FOLDER+'/'
  
  snapid.each.with_index do |v,j|
    from = path+v.to_s
    to = path+(j+1).to_s

    if from != to
      `mv #{from} #{to}`
      puts "#{v} --> #{j+1}"
    end

  end

end


def prune
  count = 0
  keep_count = 0
  snapid.map{ |id| if readinfo(id)[4]=='1' then keep_count+=1 end }
  maxdel = snapid.length - (MAXIMUM_SNAPSHOTS + keep_count)
  
  snapid.each do |id|
    if count >= maxdel then break end
    unless readinfo(id)[4]=='1'
      code1 = `btrfs subvolume delete #{SNAPSHOTS_FOLDER}/#{id}/data; echo $?`.to_i
      code2 = `rm -r #{SNAPSHOTS_FOLDER}/#{id}; echo $?`.to_i 
      if code1.abs + code2.abs > 0 
        puts "FAILED pruning snapshot [#{id}]. ABORTED."
      else
        puts "pruning snapshot [#{id}]."
        count+=1
      end
    end
  end
end


def mark
  @array_selected.each do |id|
    file    = SNAPSHOTS_FOLDER+'/'+id.to_s+'/info' 
    date    = readinfo(id)[0]
    time    = readinfo(id)[1]
    comm    = readinfo(id)[2]
    kernel  = readinfo(id)[3]
    keep    = (-readinfo(id)[4].to_i+2)/2
    info = date+';'+time+';'+comm+';'+kernel+';'+keep.to_s
    File.write(file,info,mode:'w')
  end
end


def format_message(message,mode)
  if mode == 0 then sign = ":: ".blue.bold end #Informative
  if mode == 1 then sign = ":: ".red.bold end #Aborted
  if mode == 2 then sign = ":: ".yellow.bold end #User decision
  return sign+message.bold
end


unless ENV['USER'] == 'root'
  puts format_message("You must run as root. ABORTED.",1)
  abort
end


opt = ARGV[0]
selid = ARGV[1]
if opt.nil? then opt = 'help' end

if opt.include? 'snapshot'
  keep = 0
  if opt == 'snapshot-keep' then keep = 1 end 
  snapshot(selid,keep,false)
  if snapid.length >= MAXIMUM_SNAPSHOTS then prune end
  if snapid.last > 900 then repack end
end


if opt == 'list' or opt == 'list-verbose'
  list(opt)
end


if opt == 'rollback'
  if Dir.exists? MOUNT_POINT then puts format_message("The '#{MOUNT_POINT}'\
 folder shouldn't exist. ABORTED.",1); abort end
  if selid.nil?
    list(opt)
    selid = STDIN.gets.chomp
    if_letter_then_abort(selid) 
  end
    select(selid); rollback
end


if opt == 'delete'
  if selid.nil?
    list(opt)
    selid = STDIN.gets.chomp
    if_letter_then_abort(selid)
  end
  select(selid); delete
end


if opt == 'toggle-keep'
  if selid.nil?
    list(opt)
    selid = STDIN.gets.chomp
    if_letter_then_abort(selid)
  end
  select(selid); mark
end


if opt == 'help' 
  puts '------------------------------'.bold
  puts 'USAGE:    timepatrol [COMMAND]'.bold
  puts '------------------------------'.bold
  puts 'COMMANDS:'.yellow.bold
  puts "          snapshot 'COMMENT'"
  puts "          snapshot-keep 'COMMENT'"
  puts "          toggle-keep"
  puts '          delete'
  puts '          rollback'
  puts '          list'
end

