#!/usr/bin/ruby
# frozen_string_literal: true

require 'io/console'
require 'tmpdir'

config_file = '/etc/timepatrol/config'

if File.file? config_file
  load config_file
else
  puts 'It seems this is your first run.'
  puts "You must 'sudo cp /etc/timepatrol/config-example #{config_file}',"
  puts "then edit 'config' according to your system."
  puts 'ABORTED.'
  abort
end

# CHANGE (OR NOT) STRING COLORS
class String
  def colorize(code1, code2)
    if DISABLE_COLORS != 'true'
      "\e[#{code1}m#{self}\e[#{code2}m"
    else
      self
    end
  end

  def red
    colorize(31, 0)
  end

  def green
    colorize(32, 0)
  end

  def yellow
    colorize(33, 0)
  end

  def blue
    colorize(34, 0)
  end

  def magenta
    colorize(35, 0)
  end

  def grey
    colorize(37, 0)
  end

  def bold
    colorize(1, 22)
  end
end

# FORMAT TIMEPATROL MESSAGES
class String
  def abort
    ':: '.red.bold + self.bold 
  end

  def inform
    ':: '.blue.bold + self.bold
  end

  def decide
    ':: '.yellow.bold + self.bold
  end
end

def max_kernel_size
  array_kernel_size = Array.new

  snapid.each.with_index do |id, index|
    kernel = readinfo(id)[3]
    array_kernel_size << kernel.size
  end

  return array_kernel_size.max
end

def root?
  ENV['USER'] == 'root'
end

def max_snapshots_limit?
  MAXIMUM_SNAPSHOTS.to_i > 999
end

def now
  Time.new.strftime '%Y.%m.%d;%H:%M:%S'
end

def snapid
  id_list = []
  subvolumes = `btrfs subvolume list /`
  subvolumes.split("\n").each do |line|
    if line.include?(SNAPSHOTS_VOLUME) && line.include?('data')
      id_list << (line.split "#{SNAPSHOTS_VOLUME}/").last.delete('/data').to_i
    end
  end
  id_list.sort
end

def sanitize(string)
  string ||= ''
  string.gsub(';', '')
end

def snapshot(comm, keep, fake)
  snapshot_path = "#{SNAPSHOTS_FOLDER}/#{snapid.last + 1}"
  `mkdir #{snapshot_path}`
  unless fake
    puts `btrfs subvolume snapshot / #{snapshot_path}/data`
    File.write('/tmp/timepatrol_last_snapshot', snapshot_path, mode: 'w')
  end
  info = "#{now};#{sanitize(comm)};#{`uname -r`.chomp};#{keep}"
  File.write("#{snapshot_path}/info", info, mode: 'w')
end

def chunk_words(words)
  words.flat_map do |word|
    if word.length > @number_cols
      # Chunk the word into pieces of size `@number_cols`
      word.scan(/.{1,#{@number_cols}}/)
    else
      # If the word fits within `number_cols`, return it as is
      word
    end
  end
end

def word_wrap(text, indent)
  
  words = text.split(' ')  # Split by spaces
  words = chunk_words(words) # Split big words into chunks

  lines = []
  line = ""  # First line has no indentation

  words.each do |word|
    if (line + " " + word).strip.length <= @number_cols  # Fits in current line
      line += " " unless line.empty?
      line += word
    else  # Move to a new line
      lines << line.rstrip  # Store the current line
      break if @max_lines && lines.size >= @max_lines  # Stop if limit reached
      line = (' ' * indent) + word  # Indent only from the second line
    end
  end

  lines << line.rstrip unless line.empty? || (@max_lines && lines.size >= @max_lines)  # Add the last line if space allows
  lines.join("\n")  # Convert to a single string
end

def no_snapshot
  puts 'No snapshot.'.abort
  abort
end

def readinfo(id)
  path = "#{SNAPSHOTS_FOLDER}/#{id}"
  no_snapshot unless Dir.exist? path
  return File.read("#{path}/info").strip.split(';')
end

def colorline(string, index)
  if index.odd?
    string.grey
  else
    string
  end
end

def line_length
  @number_cols + 32 + @max_kernel_size
end

def lineline(type)
  type * line_length
end

def title
  string = ':: TIMEPATROL SNAPSHOTS ::'
  ' ' * (line_length / 2 - string.size / 2) + string.yellow.bold
end

def legend
  k = @max_kernel_size - 4
  "#{' '*3}ID#{' '*3}DATE#{' '*8}TIME#{' '*6}KERNEL#{' '*k}COMMENT".bold
end

def format_information(id, info, index)
  date, time, comm, kernel, keep = info
  
  comm  = word_wrap(comm, 32 + @max_kernel_size)
  
  kernel_space = @max_kernel_size - kernel.size + 2
  
  id_space = 4 - id.to_s.size
  id = colorline("[#{id}]", index)

  date = colorline(date, index)
  time = colorline(time, index)
  comm = colorline(comm, index)
  kernel = colorline(kernel, index)

  if keep == '1'
    id = '*'.green.bold + id
    id_space -= 1
  end

  ' '*id_space+id + ' '*2 + date+' '*2 + time + ' '*2 + kernel + ' ' * kernel_space + comm
end

def array_selector(selid)
  special = false
  special_selectors = ['date=', 'time=', 'comment=', 'kernel=', 'keep=']
  special_selectors.each do |string|
    special = true if selid.include? string
  end
  return substring_selector(selid) if special
  return ids_selector(selid) unless special
end

def substring_selector(selid)
  array_selected = []
  keyword = ['date=', 'time=', 'comment=', 'kernel=', 'keep=']
  5.times do |j|
    snapid.each do |id|
      string = readinfo(id)[j]
      array_selected << id if string.include? selid.sub(keyword[j], '')
    end
  end
  array_selected.uniq
end

def ids_selector(selid)
  array_selected = []
  selid.split(',').each do |item|
    if item.include? '-'
      range = item.split('-').map(&:to_i)
      snapid.each do |id| 
        array_selected << id if id >= range.min and id <= range.max
      end
    else
      array_selected << item
    end
  end
  array_selected.uniq
end

def grep_string(array_selected, substring)
  array_selected.each do |id|
    date, time, comm, kernel, keep = readinfo(id)
    comm.gsub!(substring, substring.bold)
    info = [date, time, comm, kernel, keep]
    puts format_information(id, info, 1)
  end
end

def repack
  puts 'Repacking snapshots...'
  path = "#{SNAPSHOTS_FOLDER}/"
  snapid.each.with_index do |v, j|
    from = path + v.to_s
    to = path + (j + 1).to_s
    if from != to
      `mv #{from} #{to}`
      puts "#{v} --> #{j + 1}"
    end
  end
end

def prune
  count = 0
  keep_count = 0
  snapid.map { |id| keep_count += 1 if readinfo(id)[4] == '1' }
  maxdel = snapid.length - (MAXIMUM_SNAPSHOTS.to_i + keep_count)
  snapid.each do |id|
    break if count >= maxdel

    unless readinfo(id)[4] == '1'
      code1 = `btrfs subvolume delete #{SNAPSHOTS_FOLDER}/#{id}/data; echo $?`.to_i
      code2 = `rm -r #{SNAPSHOTS_FOLDER}/#{id}; echo $?`.to_i
      if (code1.abs + code2.abs).positive?
        puts "FAILED pruning snapshot [#{id}]."
      else
        puts "pruning snapshot [#{id}]."
        count += 1
      end
    end
  end
end

def write_to_file(id, string)
  file = "#{SNAPSHOTS_FOLDER}/#{id}/info"
  File.write(file, string, mode: 'w')
end

#=============================================

unless root?
  puts 'Please run as root.'.abort
  abort
end

if max_snapshots_limit?
  puts "'MAXIMUM_SNAPSHOTS' must be < 1000.".abort
  abort
end

option = ARGV[0]
selid = ARGV[1]
new_comment = ARGV[2]

option ||= 'help'
selid ||= ''
new_comment ||= ''

@max_kernel_size = max_kernel_size

@number_cols = IO.console.winsize[1] - 32 - @max_kernel_size
@number_cols ||= 80

@mount_point = Dir.tmpdir + '/timepatrol_tmp'

case option
when 'snapshot', 'snapshot-keep'
  keep = 0
  keep = 1 if option == 'snapshot-keep'
  snapshot(selid, keep, false)
  prune if snapid.length >= MAXIMUM_SNAPSHOTS.to_i
  repack if snapid.last > 990

when 'list', 'list-verbose'

  @max_lines = nil 
  @max_lines = 1 if option == 'list'
  
  puts lineline('=')
  puts title
  puts lineline('=')
  puts legend
  
  snapid.each.with_index do |id, index|
    puts format_information(id, readinfo(id), index)
  end
  
  puts lineline('-')
  puts "TOTAL: #{snapid.length}".bold
  
when 'list-grep'
  selid ||= abort
  grep_string(substring_selector("comment=#{selid}"), selid)

when 'change-comment'
  array = array_selector(selid)
  if array.length > 1
    puts 'You must choose a single ID. ABORTED.'.abort
    abort
  end
  
  no_snapshot if array.empty?
  
  id = array.first
  date, time, comm, kernel, keep = readinfo(id)
  info = "#{date};#{time};#{new_comment};#{kernel};#{keep}"
  write_to_file(id, info)

when 'rollback'
  countdown = 10 # seconds before rebooting

  if Dir.exist? @mount_point
    puts "The '#{@mount_point}' folder shouldn't exist. ABORTED.".abort
    abort
  end

  array = array_selector(selid)
  if array.length > 1
    puts 'You must choose a single ID. ABORTED.'.abort
    abort
  end

  no_snapshot if array.empty?

  rollid = array.first
  kernel_from = `uname -r`.chomp
  kernel_to = readinfo(rollid)[3]

  if kernel_from != kernel_to
    puts "Running kernel (#{kernel_from}) is different from [#{rollid}]'s kernel. ABORTED.".abort
    abort
  end

  puts 'Rolling back to the following snapshot:'.inform
  puts format_information(rollid, readinfo(rollid), 1)

  puts 'Confirm? [y/N]'.decide
  unless $stdin.gets.chomp == 'y'
    puts 'ABORTED.'.abort
    abort
  end

  `mkdir #{@mount_point} && mount -o subvolid=5 #{DEVICE} #{@mount_point}`
  root_dir_exists = Dir.exist? "#{@mount_point}/#{ROOT_VOLUME}"
  snapshots_dir_exists = Dir.exist? "#{@mount_point}/#{SNAPSHOTS_VOLUME}"
  unless root_dir_exists && snapshots_dir_exists
    puts 'Mounting stage went wrong. ABORTED.'.abort
    abort
  end

  id = snapid.last + 1
  date, time = readinfo(rollid)
  snapshot("PRE: rollback to [#{date} #{time}]", 0, true)

  `mv #{@mount_point}/#{ROOT_VOLUME} #{@mount_point}/#{SNAPSHOTS_VOLUME}/#{id}/data`
  `btrfs subvolume snapshot #{@mount_point}/#{SNAPSHOTS_VOLUME}/#{rollid}/data #{@mount_point}/#{ROOT_VOLUME}`
  list_subvol = `btrfs subvolume list /`.split("\n")
  list_subvol.each do |subvol|
    data = subvol.split(' ')
    if data[8] == ROOT_VOLUME
      `btrfs subvolume set-default #{data[1]} /`
      break
    end
  end
  `umount #{@mount_point} && rm -r #{@mount_point}`

  puts 'Confirmed. Rebooting in...'.inform
  (countdown - 1).times do
    puts countdown -= 1
    sleep 1
  end
  puts 'BUCKLE UP!'
  sleep 2
  `reboot`

when 'delete'
  array = array_selector(selid)
  no_snapshot if array.empty?

  array.each do |iid|
    puts format_information(iid, readinfo(iid), 1)
  end

  puts 'Confirm deletion of the selected snapshot(s) above? [y/N]'.decide
  unless $stdin.gets.chomp == 'y'
    puts 'ABORTED.'.abort
    abort
  end

  puts 'Confirmed.'.inform
  array.each do |iid|
    code1 = `btrfs subvolume delete #{SNAPSHOTS_FOLDER}/#{iid}/data; echo $?`.to_i
    code2 = `rm -r #{SNAPSHOTS_FOLDER}/#{iid}; echo $?`.to_i
    puts "FAILED deleting snapshot [#{iid}].".abort if (code1.abs + code2.abs).positive?
  end

when 'toggle-keep'
  array = array_selector(selid)
  no_snapshot if array.empty?

  array.each do |iid|
    date, time, comm, kernel = readinfo(iid)
    keep = (-readinfo(iid)[4].to_i + 2) / 2
    info = "#{date};#{time};#{comm};#{kernel};#{keep}"
    write_to_file(iid, info)
  end

when 'help'
  space = 40
  line = ('-'.*space).bold
  puts line
  puts 'USAGE:'.yellow.bold + ' timepatrol [COMMAND]'.bold
  puts line
  puts 'COMMANDS:'.yellow.bold + " snapshot 'OPTIONAL COMMENT'"
  puts "          snapshot-keep 'OPTIONAL COMMENT'"
  puts "          change-comment ID 'NEW COMMENT'"
  puts '          toggle-keep ID'
  puts '          delete ID'
  puts '          rollback ID'
  puts '          list'
  puts '          list-verbose'
  puts "          list-grep 'STRING'"
  puts line
  puts 'https://github.com/abdeoliveira/timepatrol/#Usage'

else
  puts "There is no '#{option}' option.".abort
  puts "Type 'sudo timepatrol help' for a list of commands.".abort
end
